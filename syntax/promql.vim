if exists("b:current_syntax")
    finish
endif

let b:current_syntax = "promql"

syntax match Number "\<\d*\([Ee][+-]\?\d\+\)\?\>"
syntax match Number "\<\d\+[.]\d*\([Ee][+-]\?\d\+\)\?\>"
syntax match Number "\<[.]\d\+\([Ee][+-]\?\d\+\)\?\>"

" Define parenthesis matching for proper indentation
syntax region promqlParen transparent start='(' end=')' contains=ALLBUT,promqlParenError
syntax match promqlParenError ')'

" Set indentation rules
setlocal indentexpr=GetPromqlIndent()
setlocal indentkeys=0{,0},0),0],!^F,o,O,e
setlocal autoindent

" Indentation function
if !exists("*GetPromqlIndent")
    function GetPromqlIndent()
        let lnum = prevnonblank(v:lnum - 1)
        if lnum == 0
            return 0
        endif

        let ind = indent(lnum)
        let pline = getline(lnum)
        let cline = getline(v:lnum)

        " Outdent for closing brace
        if cline =~ '^\s*}'
            let ind = indent(s:MatchingOpenBrace(v:lnum, cline))
            return ind
        endif

        " Increase indent after an opening brace
        if pline =~ '{\s*$'
            let ind = ind + &sw
        endif

        " Increase indent after an opening parenthesis
        if pline =~ '([^)]*$'
            let ind = ind + &sw
        endif

        " Decrease indent for closing parenthesis
        if cline =~ '^\s*)'
            let ind = indent(s:MatchingOpenParen(v:lnum, cline))
        endif

        return ind
    endfunction

    " Find matching opening parenthesis
    function s:MatchingOpenParen(lnum, line)
        let col = matchend(a:line, '^\s*)')
        call cursor(a:lnum, col)
        let [m_lnum, m_col] = searchpairpos('(', '', ')', 'bW')
        return m_lnum
    endfunction

    function s:MatchingOpenBrace(lnum, line)
        let col = matchend(a:line, '^\s*}')
        call cursor(a:lnum, col)
        let [m_lnum, m_col] = searchpairpos('{', '', '}', 'bW')
        return m_lnum
    endfunction
endif

syntax keyword prometheusKeyword ALERT IF FOR LABELS ANNOTATIONS AND WITH

"Autogenerated with the output from:
" curl -s https://raw.githubusercontent.com/prometheus/prometheus/main/docs/querying/functions.md | egrep -o ' `\w+\([^)]*)`' | sed -E 's/.*`([^(]+).*/\1/'| sort -u | fmt -w60 | sed 's/^/syntax keyword prometheusFunction /'

syntax keyword prometheusFunction abs absent absent_over_time acos acosh asin asinh
syntax keyword prometheusFunction atan atanh avg_over_time ceil changes clamp clamp_max
syntax keyword prometheusFunction clamp_min cos cosh count_over_time day_of_month
syntax keyword prometheusFunction day_of_week day_of_year days_in_month deg delta deriv
syntax keyword prometheusFunction double_exponential_smoothing exp first_over_time
syntax keyword prometheusFunction floor histogram_avg histogram_count histogram_fraction
syntax keyword prometheusFunction histogram_quantile histogram_stddev histogram_stdvar
syntax keyword prometheusFunction histogram_sum hour idelta increase info irate
syntax keyword prometheusFunction label_join label_replace last_over_time ln log10 log2
syntax keyword prometheusFunction mad_over_time max_over_time min_over_time minute month pi
syntax keyword prometheusFunction predict_linear present_over_time quantile_over_time rad
syntax keyword prometheusFunction rate resets round scalar sgn sin sinh sort sort_by_label
syntax keyword prometheusFunction sort_by_label_desc sort_desc sqrt stddev_over_time
syntax keyword prometheusFunction stdvar_over_time sum sum_over_time tan tanh time
syntax keyword prometheusFunction timestamp ts_of_first_over_time ts_of_last_over_time
syntax keyword prometheusFunction ts_of_max_over_time ts_of_min_over_time vector year

syntax match prometheusComment '#.*'

syntax match prometheusOperator "\v[\+\-\*\/\%\^\=]"
syntax match prometheusOperator "\v\=\="
syntax match prometheusOperator "\v\!\="
syntax match prometheusOperator "\v\>"
syntax match prometheusOperator "\v\>\="
syntax match prometheusOperator "\v\<"
syntax match prometheusOperator "\v\<\="
syntax match prometheusOperator "\v\=\~"
syntax match prometheusOperator "\v\!\~"

syntax match prometheusSpecial "\v[()]"

syntax keyword prometheusAggrOperator and or unless on ignoring group_left group_right
"Autogenerated with the output from:
" curl -s https://raw.githubusercontent.com/prometheus/prometheus/main/docs/querying/operators.md | egrep -o ' `\w+\([^)]*)`' |sed -E 's/.*`([^(]+).*/\1/'| sort -u | fmt -w60|sed 's/^/syntax keyword prometheusAggrOperator /'
syntax keyword prometheusAggrOperator avg bottomk count count_values group ignoring ignoring
syntax keyword prometheusAggrOperator limitk limit_ratio limit_ratio limit_ratio max min quantile
syntax keyword prometheusAggrOperator quantile quantile stddev stdvar sum topk


syntax match prometheusRangeSelector "\d\+[smhdwy]"
syntax match prometheusRangeSelector "offset"

syntax region String start=+\z(#*\)\z("\)+ skip="\\\z2" end="\z2\z1"

highlight link prometheusKeyword Keyword
highlight link prometheusRangeSelector Keyword
highlight link prometheusComment Comment
highlight link prometheusOperator Operator
highlight link prometheusAggrOperator Operator
highlight link prometheusFunction Function
highlight link prometheusSpecial Special
highlight link promqlParenError Error

highlight Function ctermfg=DarkGreen
highlight Operator ctermfg=DarkCyan
